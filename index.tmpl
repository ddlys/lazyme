<!doctype html>

<!--
Copyright (C) 2017 ddly

This file is part of LazyMe.

LazyMe is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Remote control</title>
  <style>
    html {
      font-size: 62.5%;
      font-family: sans-serif;
    }
    html, body, * {
      margin: 0; 
      padding: 0;
    }
    body {
      text-align: center;
      background-color: #192125; 
      color: #435965;
    }
    #wrapper {
      width: 100%;
      text-align: center;
    }
    #soundVolumeIndicator {
      font-size: 10rem; 
      margin-bottom: 1rem;
      user-select: none;
    }
    #soundVolumeSlider {
      width: 75%;
      max-width: 50rem;
      -webkit-appearance: none; 
      outline: none; 
      background: #435965;
    }
    #soundVolumeSlider::-webkit-slider-thumb {
      -webkit-appearance: none;
      background: red;
      width: 5rem;
      height: 5rem;
      background: #2f3e46;
    }
    #powerButton {
      user-select: none;
      -webkit-appearance: none;
      width: 9rem;
      height: 9rem;
      border: solid 1rem #5f2626;
      border-radius: 5rem;
      margin: 5rem;
    }
    #powerButton:focus {
      outline: none;
    }
    #powerButton:after {
      content: "";
      position: absolute;
      width: 1rem;
      height: 5rem;
      background: #5f2626; 
      top: 4rem;
      left: 50%;
      margin-left: -1rem;
      border: #192125 solid 0.5rem;
    }
    #powerButton:checked:after {
      content: "";
      position: absolute;
      width: 1rem;
      height: 8rem;
      top: 5.5rem;
      left: 50%;
      margin-left: -0.5rem;
      animation-name: powerButton;
      transform: rotate(45deg);
      border: none;
    }
  </style>
</head>
<body onload="Init()">
  <div id="wrapper">
    <input id="powerButton" type="checkbox" __CHK__/>
    <div id="soundVolumeIndicator">__VOLUME__</div>
    <input id="soundVolumeSlider" type="range" min=0 max=100 step=5 value=__VOLUME__ />
  </div>
  <script>
    var Device = {}

    Device.HasTouchScreen = function () {
        return "ontouchstart" in window
    }

    Device.Vibrate = function(sequence) {
        if (navigator && navigator.vibrate) {
            navigator.vibrate(sequence)
        }
    }


    var UI = {}

    UI.PowerButton = undefined

    UI.SoundVolumeSlider = undefined

    UI.SoundVolumeIndicator = undefined
    
    UI.SetText = function(element, text) {
        element.innerHTML = text
    }

    var Client = {}

    Client.xhr = new XMLHttpRequest()

    Client.Post = function(path) {
        Client.xhr.open("POST", "http://__HOST__:__PORT__/" + path, true)
        Client.xhr.send("")
    }


    var PowerController = {}

    PowerController.ImmediateShutdownTimer = 0

    PowerController.OnTouch = function(event) {
        event.preventDefault()

        var element = event.srcElement

        Device.Vibrate(50)
        element.checked = !element.checked

        PowerController.ImmediateShutdownTimer = setTimeout(function() {
            Device.Vibrate(250)
            Client.Post("shutdown/now")
        }, 5000)
    }

    PowerController.OnRelease = function(event) {
        event.preventDefault()

        var element = event.srcElement

        if (element.checked) {
            Client.Post("shutdown/30")
        } else {
            Client.Post("shutdown/cancel")
        }

        clearTimeout(PowerController.ImmediateShutdownTimer)
    }

    PowerController.OnClick = function(event) {
        event.preventDefault()

        var element = event.srcElement

        element.checked = !element.checked
    }


    var SoundController = {}

    SoundController.SetVolume = function(event) {
        var element = event.srcElement

        UI.SetText(UI.SoundVolumeIndicator, element.value)

        Client.Post("volume/" + element.value)
    }

    function Init() {
        UI.PowerButton = document.getElementById("powerButton")
        UI.SoundVolumeSlider = document.getElementById("soundVolumeSlider")
        UI.SoundVolumeIndicator = document.getElementById("soundVolumeIndicator")

        if (Device.HasTouchScreen()) {
            UI.PowerButton.ontouchstart = PowerController.OnTouch
            UI.PowerButton.ontouchend = PowerController.OnRelease
        } else {
            UI.PowerButton.onmousedown = PowerController.OnTouch
            UI.PowerButton.onmouseup = PowerController.OnRelease
            UI.PowerButton.onclick = PowerController.OnClick
        }

        UI.SoundVolumeSlider.onchange = SoundController.SetVolume
    }
  </script>
</body>
</html>

